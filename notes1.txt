1.python的变量作用域：
  能够改变变量作用域的代码段只有def、class、lamda
  对于if/elif/else、try/except/finally、for/while，代码块内的变量在外面还可以继续用
  （和C++不同）

2.python的类变量和实例变量：
  class Man:
    gender = 'male'   
    avg_height = 175
    lis = ['hello', 'world']
 
    def __init__(self, name):
        self.name = name  #name在类的构造函数中定义，是属于对象的变量
  在类中直接定义（而不是类的方法中）的为类变量，类似C++的静态成员;
  在类的方法中定义的且用self.修饰的为实例变量，类似C++的成员变量。
  
  类的对象试图修改一个immutable的类变量（如字符串、整型），程序会创建一个这个类变量的副本，
  若输出Man.gender，还是原来的值。
  类的对象试图修改一个mutable的类变量（如列表），会直接进行修改，而不会新生成一个变量。
  若输出Man.gender，和原来不一样。
  
3.通过一个对象a访问一个变量x，变量的查找过程是这样的：
  先在对象自身的__dict__中查找是否有x，如果有则返回，
  否则进入对象a所属的类A的__dict__中进行查找。
  
4.若想在类方法外面比较清晰地定义实例变量，又不像它被当做类变量，
  可以用__ins_var
  
5.类的内部可以定义新的成员，除此以外，在程序的任何位置可以给类或者对象定义新的变量。
  和C++不同。